// Code generated by MockGen. DO NOT EDIT.
// Source: read_service.go
//
// Generated by this command:
//
//	mockgen -source read_service.go -destination mocks_test.go -package readOffers_test
//

// Package readOffers_test is a generated GoMock package.
package readservice_test

import (
	"context"
	"reflect"
	"testing"

	"github.com/sergunchig/merchant_exp.git/internal/entity"
	readservice "github.com/sergunchig/merchant_exp.git/internal/services/readService"

	"go.uber.org/mock/gomock"
)

// MockrepoOffers is a mock of repoOffers interface.
type MockrepoOffers struct {
	ctrl     *gomock.Controller
	recorder *MockrepoOffersMockRecorder
	isgomock struct{}
}

// MockrepoOffersMockRecorder is the mock recorder for MockrepoOffers.
type MockrepoOffersMockRecorder struct {
	mock *MockrepoOffers
}

// NewMockrepoOffers creates a new mock instance.
func NewMockrepoOffers(ctrl *gomock.Controller) *MockrepoOffers {
	mock := &MockrepoOffers{ctrl: ctrl}
	mock.recorder = &MockrepoOffersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrepoOffers) EXPECT() *MockrepoOffersMockRecorder {
	return m.recorder
}

// GetOffer mocks base method.
func (m *MockrepoOffers) GetOffer(ctx context.Context, offer_id int) (entity.Offer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffer", ctx, offer_id)
	ret0, _ := ret[0].(entity.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffer indicates an expected call of GetOffer.
func (mr *MockrepoOffersMockRecorder) GetOffer(ctx, offer_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffer", reflect.TypeOf((*MockrepoOffers)(nil).GetOffer), ctx, offer_id)
}

// Read mocks base method.
func (m *MockrepoOffers) Read(ctx context.Context) ([]entity.Offer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx)
	ret0, _ := ret[0].([]entity.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockrepoOffersMockRecorder) Read(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockrepoOffers)(nil).Read), ctx)
}

func TestReadOffer(t *testing.T){
	tests := []struct{
		name string
		entity entity.Offer
		offerId int
		err error
	}{
		{
			name: "normal case",
			entity: entity.Offer{Name: "bear", OfferId: 3, Price: 15, Available: true},
			offerId: 3,
			err: nil,
		},
	}

	ctrl := gomock.NewController(t)
	repo := NewMockrepoOffers(ctrl)
	
	service := readservice.New(repo)
	ctx := context.Background()

	for _, test := range tests{
		repo.EXPECT().GetOffer(ctx, test.offerId).Return(test.entity, test.err).Times(1)

		_, err := service.GetOffer(ctx, test.offerId)
		t.Run(test.name, func(t *testing.T) {
			if err != test.err{
				t.Fail()
			}
		})
	}
}
